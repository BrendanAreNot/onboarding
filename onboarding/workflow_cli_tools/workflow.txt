2.1 - Workflow Exercises

2.1.2 - Artifacts Exercises

1. Compare and contrast how we use snapshot and release versions of artifacts in the daily
workflow.

Snapshot artifacts are mutable and frequently changed. As the name suggests, Snapshots provide a view of the project at a specific point in development. Release artifacts are a more serious. These are immutable and not frequently changed. Any changes made to a release artifact aren't implemented until the next version of that artifact. Releases cannot be changed or updated for no reason. Developmental changes should be made with Snapshots, and Releases should contain the larger changes. In our workflow, changes are implemented as snapshots first, which are then collected and implemented en mass to the Release version, which is updated. Snapshots are like the kitchen and when the food is served it becomes a Release.


2. Identify the classifiers and file types for the artifacts found in the following snapshot directory:
s3://com.esc.data/snapshot/com/esc/data/tulsa-2014/2.3.0-SNAPSHOT/




3. Find the corresponding release directory for the snapshot in the previous question.




4. Copy the .pom file for the 2.3.0 release version of the Tulsa 2014 project to your local direc-
tory. Name the group ID, artifact ID, and version number for the dependencies listed. Find
the line numbers on which the classifiers and types for the artifacts are declared. Then,
write a summary of your findings (i.e., what does it mean for these artifacts to be listed as
dependencies?).




5. Copy the latest ESCalate documentation file. This will be a great reference to have as you
complete more onboarding tasks. Find the latest version in:
s3://com.esc.artifacts/release/com/esc/doc/escalate/
Copy the pdf to your local repo. There are .zip files you can download as well, but the pdf is
easier to search.

Copied!

2.1.3 - Semantic Versioning Exercises

1. Identify the parts of a semantic version. What does each part mean?

Semantic versioning uses the following format: MAJOR.MINOR.PATCH-(pre-release)+(metadata) [1.0.0-alpha+001 as an example]

MAJOR (X.0.0) changes are made whenever an update would be incompatible with older versions or changes. For example, if a program that only performed the "add" function had changes made to how it outputs or inputs information, that would constitute a Major version update since other programs that rely on those inputs/outputs would be incompatible.

MINOR (0.X.0) changes are made whenever new features are added in a backward-compatible manner. Using the "add" program from the previous example, implementing a "subtract" feature would be a Minor update since it does not interfere with the functionality of the "add" feature. Changes that may seem major but implement some default value with a change can be considered Minor as well since they wouldn't break anything.

PATCH (0.0.X) changes are made whenever backward-compatible bug fixes are made. Making changes to the "add" program to fix a bug would be a Patch. As long as it doesn't add functionality or break previous versions, it is a Patch.

Pre-release and metadata components can be added to provide additional information (metadata) or let users know that certain functions may be incomplete (pre-release) but neither are mandatory.

Whenever a MAJOR or MINOR update is made, lesser changes are reset to 0. For example: Version 3.4.8 receives a MAJOR update and becomes Version 4.0.0. Version 3.4.8 receives a MINOR update and becomes Version 3.5.0.
Keep in mind that precedence is established from left to right (Major to Pre-release). When two versions are identical except for metadata, they have equal precedence.
Therefore, 1.0.0-alpha+002 = 1.0.0-alpha+003 < 1.0.0-beta < 1.0.0 < 1.0.1 < 1.1.0 < 2.0.0


2. Consider the development of the following JavaScript function amazing:

function amazing(){
return "Awsome";
}

Call this version 1.0.0.

a. Suppose we recognize that we made a mistake in the original function and correct it
as follows:

function amazing(){
return "Awesome";
}

What should this new version be called?

Since a bug has been fixed and no features have been changed, a Patch has been implemented and the new version is 1.0.1


b. Suppose we next make the following change:

function amazing(language){
if(language == null)
throw new Error("Language argument must be provided.");
return language === "fr" ? "Génial":"Awesome";
}

What should this version now be called?

Since this update includes changes to how the function is used by requiring a "language" argument without including a default, it breaks old versions. This means it is a Major change and the new version is 2.0.0


c. Suppose we next make the following change:
function amazing(language){
if(language == null)
throw new Error("Language argument must be provided.");
return language === "fr" ? "Génial" : language === "de" : "Spitze" : "Awsome";
}

What should this version now be called?

Since this update adds a new language but does not change the pre-existing one, it is a Minor change. The new version is 2.1.0


d. Suppose we next make the following change:

function amazing(language){
if(language == null)
throw new Error("Language argument must be provided.");
return language === "fr" ? "Génial" : language === "de" : "Spitze" : "Awesome";
}

What should this version now be called?

This change fixes a typo and changes "Awsome" to "Awesome". This is a bug fix or Patch and the new version is 2.1.1



2.1.6 - Continuous Integration Exercises

1. Contact our DevOps engineer to get your login name and password for Jenkins access.
Then, log in to Jenkins at jenkins.escmatrix.com




2. Using Jenkins, you will idenfity the commit ID for the ESC release of a data project. Since
Jenkins does not monitor projects that have been completed, let us know when you reach
this step so we can choose a project for you to look at.




3. Find the git repo for the project defined in the previous exercise. You should see the commit
you found. Identify the prior commit and note the changes that occurred.




4. Navigate to the help section on gitlab.escmatrix.com to view ESC naming conventions. When
naming projects, what piece of information should all artifact IDs include?




5. Rewrite the project name "Chattanooga_2018" so that it conforms to ESC artifact naming
conventions.




6. Take time to fully explore more of GitLab’s features. The Repository sub-menu on the left
provides different options for examining the changes that have occurred in a repository over
time. The Graph tool provides a visual representation of the changes to the repository, in-
cluding identifying the creation of new branches for a project.




